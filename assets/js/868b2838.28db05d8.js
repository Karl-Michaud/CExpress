"use strict";(self.webpackChunkcexpress_docs=self.webpackChunkcexpress_docs||[]).push([[120],{1105:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=r(4848),t=r(8453);const i={},c="Usage Examples",o={id:"usage-examples",title:"Usage Examples",description:"Quick Navigation",source:"@site/docs/usage-examples.md",sourceDirName:".",slug:"/usage-examples",permalink:"/CExpress/usage-examples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/CExpress/api-reference"}},a={},d=[{value:"Quick Navigation",id:"quick-navigation",level:2},{value:"Basic Hello World",id:"basic-hello-world",level:2},{value:"JSON API",id:"json-api",level:2},{value:"Static Files",id:"static-files",level:2},{value:"REST API",id:"rest-api",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(e.h2,{id:"quick-navigation",children:"Quick Navigation"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#basic-hello-world",children:"Basic Hello World"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#json-api",children:"JSON API"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#static-files",children:"Static Files"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#rest-api",children:"REST API"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"basic-hello-world",children:"Basic Hello World"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:'#include "include/CExpress/server.h"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nchar *hello_handler(void) {\n    char *response = malloc(50);\n    strcpy(response, "Hello, World from CExpress!");\n    return response;\n}\n\nchar *time_handler(void) {\n    char *response = malloc(100);\n    time_t now = time(NULL);\n    struct tm *tm_info = localtime(&now);\n    strftime(response, 100, "Current time: %Y-%m-%d %H:%M:%S", tm_info);\n    return response;\n}\n\nint main(void) {\n    printf("Starting CExpress Basic Hello World Server...\\n");\n    \n    Server *server = server_init(8080, 10, 5, DEV);\n    if (!server) {\n        fprintf(stderr, "Failed to initialize server\\n");\n        return 1;\n    }\n    \n    server_add_route(server, GET, "/hello", hello_handler);\n    server_add_route(server, GET, "/time", time_handler);\n    \n    printf("Server running on http://localhost:8080\\n");\n    server_start(server);\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"json-api",children:"JSON API"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:'#include "include/CExpress/server.h"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\ntypedef struct {\n    int id;\n    char name[50];\n    char email[100];\n} User;\n\nUser users[10];\nint user_count = 0;\nint next_id = 1;\n\nchar *get_users_handler(void) {\n    char *response = malloc(1024);\n    strcpy(response, "{\\n  \\"users\\": [\\n");\n    \n    for (int i = 0; i < user_count; i++) {\n        char user_json[200];\n        snprintf(user_json, sizeof(user_json), \n                "    {\\n      \\"id\\": %d,\\n      \\"name\\": \\"%s\\",\\n      \\"email\\": \\"%s\\"\\n    }%s\\n",\n                users[i].id, users[i].name, users[i].email,\n                (i < user_count - 1) ? "," : "");\n        strcat(response, user_json);\n    }\n    \n    strcat(response, "  ]\\n}");\n    return response;\n}\n\nchar *post_users_handler(void) {\n    char *response = malloc(200);\n    if (user_count >= 10) {\n        strcpy(response, "{\\n  \\"error\\": \\"Maximum number of users reached\\"\\n}");\n        return response;\n    }\n    \n    users[user_count].id = next_id++;\n    strcpy(users[user_count].name, "New User");\n    strcpy(users[user_count].email, "newuser@example.com");\n    user_count++;\n    \n    snprintf(response, 200, \n            "{\\n  \\"message\\": \\"User created successfully\\",\\n  \\"id\\": %d\\n}",\n            users[user_count - 1].id);\n    \n    return response;\n}\n\nint main(void) {\n    printf("Starting CExpress JSON API Server...\\n");\n    \n    Server *server = server_init(8080, 20, 10, DEV);\n    if (!server) {\n        fprintf(stderr, "Failed to initialize server\\n");\n        return 1;\n    }\n    \n    server_add_route(server, GET, "/api/users", get_users_handler);\n    server_add_route(server, POST, "/api/users", post_users_handler);\n    \n    printf("API running on http://localhost:8080\\n");\n    server_start(server);\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"static-files",children:"Static Files"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:'#include "include/CExpress/server.h"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nchar *serve_index(void) {\n    char *response = malloc(1024);\n    strcpy(response, \n        "<!DOCTYPE html>\\n"\n        "<html lang=\\"en\\">\\n"\n        "<head>\\n"\n        "    <meta charset=\\"UTF-8\\">\\n"\n        "    <title>CExpress Static Server</title>\\n"\n        "    <link rel=\\"stylesheet\\" href=\\"/static/style.css\\">\\n"\n        "</head>\\n"\n        "<body>\\n"\n        "    <div class=\\"container\\">\\n"\n        "        <h1>Welcome to CExpress!</h1>\\n"\n        "        <p>This is a static file server example.</p>\\n"\n        "        <nav>\\n"\n        "            <a href=\\"/\\">Home</a>\\n"\n        "            <a href=\\"/about\\">About</a>\\n"\n        "        </nav>\\n"\n        "    </div>\\n"\n        "</body>\\n"\n        "</html>"\n    );\n    return response;\n}\n\nchar *serve_css(void) {\n    char *response = malloc(1024);\n    strcpy(response,\n        "body {\\n"\n        "    font-family: Arial, sans-serif;\\n"\n        "    margin: 0;\\n"\n        "    padding: 20px;\\n"\n        "    background-color: #f5f5f5;\\n"\n        "}\\n"\n        ".container {\\n"\n        "    max-width: 800px;\\n"\n        "    margin: 0 auto;\\n"\n        "    background: white;\\n"\n        "    padding: 30px;\\n"\n        "    border-radius: 8px;\\n"\n        "}\\n"\n        "h1 { color: #333; }\\n"\n        "nav a { margin-right: 20px; color: #007acc; }\\n"\n    );\n    return response;\n}\n\nint main(void) {\n    printf("Starting CExpress Static File Server...\\n");\n    \n    Server *server = server_init(8080, 15, 5, DEV);\n    if (!server) {\n        fprintf(stderr, "Failed to initialize server\\n");\n        return 1;\n    }\n    \n    server_add_route(server, GET, "/", serve_index);\n    server_add_route(server, GET, "/static/style.css", serve_css);\n    \n    printf("Server running on http://localhost:8080\\n");\n    server_start(server);\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"rest-api",children:"REST API"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:'#include "include/CExpress/server.h"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\ntypedef struct {\n    int id;\n    char name[100];\n    double price;\n    char category[50];\n} Product;\n\nProduct products[50];\nint product_count = 0;\nint next_id = 1;\n\nchar *get_products_handler(void) {\n    char *response = malloc(2048);\n    strcpy(response, "{\\n  \\"products\\": [\\n");\n    \n    for (int i = 0; i < product_count; i++) {\n        char product_json[500];\n        snprintf(product_json, sizeof(product_json), \n                "    {\\n"\n                "      \\"id\\": %d,\\n"\n                "      \\"name\\": \\"%s\\",\\n"\n                "      \\"price\\": %.2f,\\n"\n                "      \\"category\\": \\"%s\\"\\n"\n                "    }%s\\n",\n                products[i].id, products[i].name, products[i].price,\n                products[i].category,\n                (i < product_count - 1) ? "," : "");\n        strcat(response, product_json);\n    }\n    \n    strcat(response, "  ]\\n}");\n    return response;\n}\n\nchar *create_product_handler(void) {\n    char *response = malloc(200);\n    if (product_count >= 50) {\n        strcpy(response, "{\\n  \\"error\\": \\"Maximum products reached\\"\\n}");\n        return response;\n    }\n    \n    products[product_count].id = next_id++;\n    strcpy(products[product_count].name, "New Product");\n    strcpy(products[product_count].category, "General");\n    products[product_count].price = 99.99;\n    product_count++;\n    \n    snprintf(response, 200,\n            "{\\n"\n            "  \\"message\\": \\"Product created\\",\\n"\n            "  \\"id\\": %d\\n"\n            "}",\n            products[product_count - 1].id);\n    \n    return response;\n}\n\nint main(void) {\n    printf("Starting CExpress REST API Server...\\n");\n    \n    Server *server = server_init(8080, 25, 10, DEV);\n    if (!server) {\n        fprintf(stderr, "Failed to initialize server\\n");\n        return 1;\n    }\n    \n    server_add_route(server, GET, "/api/products", get_products_handler);\n    server_add_route(server, POST, "/api/products", create_product_handler);\n    \n    printf("API running on http://localhost:8080\\n");\n    server_start(server);\n    return 0;\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>c,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function c(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:c(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);