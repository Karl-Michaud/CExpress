"use strict";(self.webpackChunkcexpress_docs=self.webpackChunkcexpress_docs||[]).push([[443],{1302:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});var s=n(4848),d=n(8453);const c={},l="API Reference",i={id:"api-reference",title:"API Reference",description:"Types",source:"@site/docs/api-reference.md",sourceDirName:".",slug:"/api-reference",permalink:"/CExpress/api-reference",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/CExpress/installation"},next:{title:"Usage Examples",permalink:"/CExpress/usage-examples"}},t={},o=[{value:"Types",id:"types",level:2},{value:"<code>Server</code>",id:"server",level:3},{value:"<code>client_t</code>",id:"client_t",level:3},{value:"<code>Mode</code>",id:"mode",level:3},{value:"<code>method_t</code>",id:"method_t",level:3},{value:"<code>HandlerFunc</code>",id:"handlerfunc",level:3},{value:"Functions",id:"functions",level:2},{value:"<code>server_init(port, max_clients, backlog, mode)</code>",id:"server_initport-max_clients-backlog-mode",level:3},{value:"<code>server_start(server)</code>",id:"server_startserver",level:3},{value:"<code>server_free(server)</code>",id:"server_freeserver",level:3},{value:"<code>server_add_route(server, method, path, handler)</code>",id:"server_add_routeserver-method-path-handler",level:3},{value:"<code>server_remove_route(server, method, path)</code>",id:"server_remove_routeserver-method-path",level:3},{value:"Usage",id:"usage",level:2}];function a(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,s.jsx)(r.h3,{id:"server",children:(0,s.jsx)(r.code,{children:"Server"})}),"\n",(0,s.jsx)(r.p,{children:"Main server structure containing socket, address, client list, and router list."}),"\n",(0,s.jsx)(r.h3,{id:"client_t",children:(0,s.jsx)(r.code,{children:"client_t"})}),"\n",(0,s.jsx)(r.p,{children:"Represents a connected client with socket and address info."}),"\n",(0,s.jsx)(r.h3,{id:"mode",children:(0,s.jsx)(r.code,{children:"Mode"})}),"\n",(0,s.jsx)(r.p,{children:"Server binding mode:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"DEV"})," - localhost only (127.0.0.1)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"PROD"})," - all interfaces (0.0.0.0)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"method_t",children:(0,s.jsx)(r.code,{children:"method_t"})}),"\n",(0,s.jsxs)(r.p,{children:["HTTP methods: ",(0,s.jsx)(r.code,{children:"GET"}),", ",(0,s.jsx)(r.code,{children:"POST"}),", ",(0,s.jsx)(r.code,{children:"PUT"}),", ",(0,s.jsx)(r.code,{children:"DELETE"}),", ",(0,s.jsx)(r.code,{children:"FAIL"})]}),"\n",(0,s.jsx)(r.h3,{id:"handlerfunc",children:(0,s.jsx)(r.code,{children:"HandlerFunc"})}),"\n",(0,s.jsx)(r.p,{children:"Function pointer type for route handlers:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:"typedef char *(*HandlerFunc)(void);\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Note"}),": Returned ",(0,s.jsx)(r.code,{children:"char *"})," is automatically freed by the framework."]}),"\n",(0,s.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(r.h3,{id:"server_initport-max_clients-backlog-mode",children:(0,s.jsx)(r.code,{children:"server_init(port, max_clients, backlog, mode)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:"Server *server_init(int port, int max_clients, int backlog, Mode mode);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates and initializes a new server instance."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Returns"}),": ",(0,s.jsx)(r.code,{children:"Server *"})," on success, ",(0,s.jsx)(r.code,{children:"NULL"})," on failure"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),": port number, max concurrent clients, connection queue size, binding mode"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"server_startserver",children:(0,s.jsx)(r.code,{children:"server_start(server)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:"int server_start(Server *server);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Starts the server and begins accepting connections."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Returns"}),": ",(0,s.jsx)(r.code,{children:"1"})," on successful shutdown, ",(0,s.jsx)(r.code,{children:"-1"})," on error"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Note"}),": This function blocks until interrupted"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Signal Handling"}),": Automatically handles SIGINT (Ctrl+C) to free all resources and shutdown gracefully"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"server_freeserver",children:(0,s.jsx)(r.code,{children:"server_free(server)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:"void server_free(Server *server);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Frees all server resources and shuts down the server."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Note"}),": Only use for error handling or if ",(0,s.jsx)(r.code,{children:"server_start()"})," was not called"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"server_add_routeserver-method-path-handler",children:(0,s.jsx)(r.code,{children:"server_add_route(server, method, path, handler)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:"int server_add_route(Server *server, method_t method, path_t path, HandlerFunc handler);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Registers a new route with a handler function."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Returns"}),": ",(0,s.jsx)(r.code,{children:"1"})," on success, ",(0,s.jsx)(r.code,{children:"0"})," on failure"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),": server instance, HTTP method, URL path, handler function"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"server_remove_routeserver-method-path",children:(0,s.jsx)(r.code,{children:"server_remove_route(server, method, path)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:"int server_remove_route(Server *server, method_t method, path_t path);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Removes a route from the server."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Returns"}),": ",(0,s.jsx)(r.code,{children:"1"})," if removed, ",(0,s.jsx)(r.code,{children:"0"})," if not found"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-c",children:'#include "include/CExpress/server.h"\n\nchar *hello_handler(void) {\n    char *response = malloc(50);\n    strcpy(response, "Hello World!");\n    return response;\n}\n\nint main(void) {\n    Server *server = server_init(8080, 10, 5, DEV);\n    server_add_route(server, GET, "/hello", hello_handler);\n    server_start(server);\n    return 0;\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var s=n(6540);const d={},c=s.createContext(d);function l(e){const r=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),s.createElement(c.Provider,{value:r},e.children)}}}]);